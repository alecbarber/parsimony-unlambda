_`^sSkKvViI$[*!{

START:
wind2 R * remove_whitespace

remove_whitespace:
match L
  _ -< $; wind R * shuffle L $ START
  $ -< wind2 R * next_action
endmatch

next_action:
match L
  $    -< ACCEPT
  `i   -< _; evaluate_i
  `v   -< v; evaluate_v
  v[   -< evaluate_v_clean_up
  ``k  -< _; evaluate_k_matchX
  k[   -< step R evaluate_k_findY
  ```s -< evaluate_s_matchX
  s[   -< step R evaluate_s_X_matched
endmatch

%% Evaluating the identity is trivial - just remove it!

evaluate_i:
match R ERROR
  i -> _; START
endmatch

%% To evaluate a v, we first match the expression following it
%% Step 1: Match expression for argument
%% Step 2: Remove expression

evaluate_v:
match R ERROR
  v -> [; match_expression
endmatch

evaluate_v_clean_up:
fill R * _ START

%% Evaluate a ``k.
%% Step 1: match expression X
%% Step 2: match expression Y
%% Step 3: remove expression Y and the mess around X

evaluate_k_matchX:
match R ERROR
  ` -> k; evaluate_k_matchX
  k -> [; match_expression
endmatch

%% Match and remove Y

evaluate_k_findY:
match R
  * -> {; match_expression
  { -> _; evaluate_k_clean_up
endmatch

%% Wipe Y and the mess around X

evaluate_k_clean_up:
fill2 R * _ wind L [ evaluate_k_clean_up_head

evaluate_k_clean_up_head:
match R ERROR
  k -> _; evaluate_k_clean_up_head
  [ -> _; normalise_matched_expression
endmatch

%% Evaluate a ```s
%% Step 1: match expression X; convert ```sXYZ to ``s[X*YZ
%% Step 2: match expression Y; convert ``s[X*YZ to ``s[X{Y*Z
%% Step 3: match expression Z; convert ``s[X{Y*Z to ``s[X!Y{Z*
%% Step 4: copy Z to X and Y, clean up

evaluate_s_matchX:
match R ERROR
  `` -> s; evaluate_s_matchX
  s -> [; match_expression
endmatch

evaluate_s_X_matched:
match R
  * -> {; match_expression
  { -> !; evaluate_s_Y_matched
  ! -> evaluate_s_Y_matched
endmatch

evaluate_s_Y_matched:
match R
  * -> {; match_expression
  { -> copy L { ! * step R evaluate_s_clean_up
endmatch

evaluate_s_clean_up:
match L
  * -> _; evaluate_s_clean_up
  { -> _; evaluate_s_clean_up
  ! -> `; evaluate_s_clean_up
  [ -> _; write R _ normalise_matched_expression
endmatch

%% Convert an expression from `x to ^X form. Mark the end of the expression with a *

match_expression:
match R
  ` -> match_expression_`
  s -> match_expression_return_to_complete
  k -> match_expression_return_to_complete
  v -> match_expression_return_to_complete
  i -> match_expression_return_to_complete
  * -> ERROR
endmatch

match_expression_return_to_complete:
match L
  [ -< match_expression_complete
  { -< match_expression_complete
endmatch

match_expression_`:
match R
  ` -> match_expression_`
  s -> match_expression_`l
  k -> match_expression_`l
  i -> match_expression_`l
  v -> match_expression_`l
  * -> ERROR
endmatch

match_expression_`l:
match R
  ` -> match_expression_`
  s -< S; match_expression_update_tick
  k -< K; match_expression_update_tick
  i -< I; match_expression_update_tick
  v -< V; match_expression_update_tick
  * -> ERROR
endmatch

match_expression_update_tick:
match L
  ` -> ^; match_expression_update_tick_return
endmatch

match_expression_update_tick_return:
match L
  [ -< match_expression
  { -< match_expression
endmatch

match_expression_complete:
match R
  s -> match_expression_complete2
  k -> match_expression_complete2
  i -> match_expression_complete2
  v -> match_expression_complete2
  * -> ERROR
endmatch

%% Find the end of the matched expression. The end is marked by either a `skiv character, or a * (end of program)
match_expression_complete2:
match R
  s -> step L shuffle2 R _ * START
  k -> step L shuffle2 R _ * START
  i -> step L shuffle2 R _ * START
  v -> step L shuffle2 R _ * START
  ` -> step L shuffle2 R _ * START
  * -> step L shuffle2 R _ * START
endmatch

%% Normalise program which may contain a matched expression

normalise_matched_expression:
match R
  ^ -> `; normalise_matched_expression
  S -> s; normalise_matched_expression
  K -> k; normalise_matched_expression
  V -> v; normalise_matched_expression
  I -> i; normalise_matched_expression
  * -< START
endmatch