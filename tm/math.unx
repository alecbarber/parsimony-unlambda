include core.unx

%% <factorial> :: x -> factorial_(x,1,1)
<factorial> :: Int -> Int :: ^x```<factorial_> $x <1> <1>

%% <factorial_> :: x,i,a -> if (i <= x) factorial_(x,i+1,i*a) else a
<factorial_> :: Int -> Int -> Int -> Int :: ^x^i^a ```<ifthenelse> ``<geq>$x$i ```<factorial_>$x`<inc>$i``<mul>$i$a $a

%% <isprime> :: x -> 1 >= maxfactor(x)
<isprime> :: Int -> Boolean :: ^x``<geq><1>`<maxfactor>$x

%% <maxfactor> :: x -> maxfactor_(x-1, x)
<maxfactor> :: Int -> Int :: ^x``<maxfactor_>`<dec>$x$x

%% <maxfactor_> f, x -> if (isfactor(f,x)) f else maxfactor_(f-1,x)
<maxfactor_> :: Int -> Int -> Int :: ^f^x ```<ifthenelse> ``<isfactor>$f$x $f ``<maxfactor_>`<dec>$f$x

%% <isfactor> f,x -> isfactor_(f,x,0)
<isfactor> :: Int -> Int -> Boolean :: ^f^x ```<isfactor_>$f$x<0>

%% <isfactor_> f,x,a -> if (x < a) false else if (x <= a) true else isfactor_(f, x, f + a)
<isfactor_> :: Int -> Int -> Int -> Boolean :: ^f^x^a ```<ifthenelse> ``<lt>$x$a <false> ```<ifthenelse> ``<leq>$x$a <true> ```<isfactor_>$f$x``<add>$f$a

